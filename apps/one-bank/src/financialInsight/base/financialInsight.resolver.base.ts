/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FinancialInsight } from "./FinancialInsight";
import { FinancialInsightCountArgs } from "./FinancialInsightCountArgs";
import { FinancialInsightFindManyArgs } from "./FinancialInsightFindManyArgs";
import { FinancialInsightFindUniqueArgs } from "./FinancialInsightFindUniqueArgs";
import { CreateFinancialInsightArgs } from "./CreateFinancialInsightArgs";
import { UpdateFinancialInsightArgs } from "./UpdateFinancialInsightArgs";
import { DeleteFinancialInsightArgs } from "./DeleteFinancialInsightArgs";
import { User } from "../../user/base/User";
import { FinancialInsightService } from "../financialInsight.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FinancialInsight)
export class FinancialInsightResolverBase {
  constructor(
    protected readonly service: FinancialInsightService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FinancialInsight",
    action: "read",
    possession: "any",
  })
  async _financialInsightsMeta(
    @graphql.Args() args: FinancialInsightCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FinancialInsight])
  @nestAccessControl.UseRoles({
    resource: "FinancialInsight",
    action: "read",
    possession: "any",
  })
  async financialInsights(
    @graphql.Args() args: FinancialInsightFindManyArgs
  ): Promise<FinancialInsight[]> {
    return this.service.financialInsights(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FinancialInsight, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FinancialInsight",
    action: "read",
    possession: "own",
  })
  async financialInsight(
    @graphql.Args() args: FinancialInsightFindUniqueArgs
  ): Promise<FinancialInsight | null> {
    const result = await this.service.financialInsight(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FinancialInsight)
  @nestAccessControl.UseRoles({
    resource: "FinancialInsight",
    action: "create",
    possession: "any",
  })
  async createFinancialInsight(
    @graphql.Args() args: CreateFinancialInsightArgs
  ): Promise<FinancialInsight> {
    return await this.service.createFinancialInsight({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FinancialInsight)
  @nestAccessControl.UseRoles({
    resource: "FinancialInsight",
    action: "update",
    possession: "any",
  })
  async updateFinancialInsight(
    @graphql.Args() args: UpdateFinancialInsightArgs
  ): Promise<FinancialInsight | null> {
    try {
      return await this.service.updateFinancialInsight({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialInsight)
  @nestAccessControl.UseRoles({
    resource: "FinancialInsight",
    action: "delete",
    possession: "any",
  })
  async deleteFinancialInsight(
    @graphql.Args() args: DeleteFinancialInsightArgs
  ): Promise<FinancialInsight | null> {
    try {
      return await this.service.deleteFinancialInsight(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: FinancialInsight
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
