/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FinancialInsight as PrismaFinancialInsight,
  User as PrismaUser,
} from "@prisma/client";

export class FinancialInsightServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancialInsightCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financialInsight.count(args);
  }

  async financialInsights<T extends Prisma.FinancialInsightFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialInsightFindManyArgs>
  ): Promise<PrismaFinancialInsight[]> {
    return this.prisma.financialInsight.findMany<Prisma.FinancialInsightFindManyArgs>(
      args
    );
  }
  async financialInsight<T extends Prisma.FinancialInsightFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialInsightFindUniqueArgs>
  ): Promise<PrismaFinancialInsight | null> {
    return this.prisma.financialInsight.findUnique(args);
  }
  async createFinancialInsight<T extends Prisma.FinancialInsightCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialInsightCreateArgs>
  ): Promise<PrismaFinancialInsight> {
    return this.prisma.financialInsight.create<T>(args);
  }
  async updateFinancialInsight<T extends Prisma.FinancialInsightUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialInsightUpdateArgs>
  ): Promise<PrismaFinancialInsight> {
    return this.prisma.financialInsight.update<T>(args);
  }
  async deleteFinancialInsight<T extends Prisma.FinancialInsightDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialInsightDeleteArgs>
  ): Promise<PrismaFinancialInsight> {
    return this.prisma.financialInsight.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.financialInsight
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
