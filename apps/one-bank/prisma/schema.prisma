datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  budgets           Budget[]
  createdAt         DateTime           @default(now())
  email             String?            @unique
  financialInsights FinancialInsight[]
  firstName         String?
  id                String             @id @default(cuid())
  lastName          String?
  notifications     Notification[]
  password          String
  payments          Payment[]
  roles             Json
  updatedAt         DateTime           @updatedAt
  username          String             @unique
  webhooks          Webhook[]
}

model BankAccount {
  accountNumber String?
  accountType   String?
  balance       String?
  createdAt     DateTime @default(now())
  id            String   @id @default(cuid())
  idPrimaryKey  String?
  updatedAt     DateTime @updatedAt
}

model Transaction {
  amount          String?
  createdAt       DateTime               @default(now())
  fromAccountId   String?
  id              String                 @id @default(cuid())
  status          EnumTransactionStatus?
  toAccountId     String?
  transactionDate DateTime?
  transactionType String?
  updatedAt       DateTime               @updatedAt
  userId          String?
}

model Payment {
  amount        String?
  bankAccountId String?
  createdAt     DateTime           @default(now())
  id            String             @id @default(cuid())
  paymentMethod String?
  scheduledDate DateTime?
  status        EnumPaymentStatus?
  updatedAt     DateTime           @updatedAt
  user          User?              @relation(fields: [userId], references: [id])
  userId        String?
}

model Notification {
  createdAt  DateTime                    @default(now())
  id         String                      @id @default(cuid())
  message    String?
  readStatus EnumNotificationReadStatus?
  typeField  String?
  updatedAt  DateTime                    @updatedAt
  user       User?                       @relation(fields: [userId], references: [id])
  userId     String?
}

model Budget {
  amountSpent String?
  category    String?
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  limit       String?
  period      String?
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model FinancialInsight {
  content     String?
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  insightType String?
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model ApiIntegration {
  apiKey      String?
  createdAt   DateTime @default(now())
  description String?
  endpoint    String?
  id          String   @id @default(cuid())
  name        String?
  updatedAt   DateTime @updatedAt
}

model Webhook {
  createdAt DateTime @default(now())
  eventType String?
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  url       String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model AuditLog {
  action    String?
  createdAt DateTime @default(now())
  details   String?
  id        String   @id @default(cuid())
  target    String?
  timestamp String?
  updatedAt DateTime @updatedAt
  userId    String?
}

enum EnumTransactionStatus {
  Option1
}

enum EnumPaymentStatus {
  Option1
}

enum EnumNotificationReadStatus {
  Option1
}
